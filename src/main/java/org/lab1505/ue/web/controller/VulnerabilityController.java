package org.lab1505.ue.web.controller;


import org.jgrapht.Graph;
import org.jgrapht.graph.SimpleDirectedGraph;
import org.lab1505.ue.alg.Game;
import org.lab1505.ue.alg.chongqing.*;
import org.lab1505.ue.entity.DemandEdge;
import org.lab1505.ue.entity.LinkEdge;
import org.lab1505.ue.fileutil.CsvGraphWriter;
import org.lab1505.ue.web.result.CodeMsg;
import org.lab1505.ue.web.result.Result;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

@Controller
public class VulnerabilityController {
    @PostMapping("vulnerability/vulnerability")
    @ResponseBody
    public Result<String> vulnerability(
            @RequestParam(value = "gpsFiles[]", required = false) MultipartFile[] gpsRecordsFiles,
            @RequestParam(value = "nodeFile", required = false) MultipartFile nodeFile,
            @RequestParam(value = "edgeFile", required = false) MultipartFile edgeFile,
            @RequestParam(value = "beta", defaultValue = "10") double beta,
            @RequestParam(value = "omega", defaultValue = "1") double omega,
            @RequestParam(value = "d", defaultValue = "1") double d,
            @RequestParam(value = "delta", defaultValue = "0.01") double delta,
            HttpServletResponse response) {
        if (gpsRecordsFiles == null || nodeFile == null || edgeFile == null) {
            return Result.error(CodeMsg.ERROR);
        }
        if (gpsRecordsFiles.length < 1) {
            return Result.error(CodeMsg.ERROR);
        }

        response.setContentType("text/csv");
        response.setHeader("Content-disposition", "attachment;filename=result.csv");

        InputStream nodeInputStream = null;
        InputStream edgeInputStream = null;
        InputStream[] gpsRecordInputStreams = new InputStream[gpsRecordsFiles.length];
        OutputStream outputStream = null;

        try {

            for (int i = 0; i < gpsRecordsFiles.length; i++) {
                gpsRecordInputStreams[i] = gpsRecordsFiles[i].getInputStream();
            }

            nodeInputStream = nodeFile.getInputStream();
            edgeInputStream = edgeFile.getInputStream();
            outputStream = response.getOutputStream();


            List<ChongqingTaxiGpsResolver.TaxiGpsRecord> records = ChongqingTaxiGpsResolver.readTaxiRecords(gpsRecordInputStreams);
            List<ChongqingMapResolver.ChongqingMapEdge> edges = ChongqingMapResolver.readEdges(edgeInputStream);
            List<ChongqingMapResolver.ChongqingMapNode> nodes = ChongqingMapResolver.readNodes(nodeInputStream);
            SimpleDirectedGraph<Integer, CMapEdge> speedGraph = EmergencySystem.readAvgSpeedLinkMap(records, nodes, edges);
            List<CMapTrip> taxiTrips = ChongqingTaxiGpsProcessor.getTaxiTrips(records, nodes);

            SimpleDirectedGraph<Integer, LinkEdge> net = new SimpleDirectedGraph<>(LinkEdge.class);
            SimpleDirectedGraph<Integer, DemandEdge> trips = new SimpleDirectedGraph<>(DemandEdge.class);

            for (CMapEdge edge : speedGraph.edgeSet()) {
                int from = speedGraph.getEdgeSource(edge);
                int to = speedGraph.getEdgeTarget(edge);
                net.addVertex(from);
                net.addVertex(to);
                double length = edge.length;
                double traveltime = edge.traveltime;
                double capacity = length * 4000;
                LinkEdge linkEdge = new LinkEdge(from, to, capacity, length, traveltime, 0, 0, 0, 0, 0);
                net.addEdge(from, to, linkEdge);
            }

            for (CMapTrip trip : taxiTrips) {
                int from = trip.startNodeId;
                int to = trip.endNodeId;
                if (from != to) {
                    trips.addVertex(from);
                    trips.addVertex(to);
                    if (trips.containsEdge(from, to)) {
                        DemandEdge demandEdge = trips.getEdge(from, to);
                        demandEdge.setDemand(demandEdge.getDemand() + 1);
                    } else {
                        DemandEdge demandEdge = new DemandEdge(1);
                        trips.addEdge(from, to, demandEdge);
                    }
                }
            }

            Game game = new Game(net, trips);
            Graph<Integer, Game.GameLink> result = game.run(beta, omega, d, delta);
            CsvGraphWriter.writeTo(result, Game.GameLink.class, outputStream);

        } catch (IOException e) {
            e.printStackTrace();
            return Result.error(CodeMsg.ERROR);
        } finally {

            try {

                for (InputStream is : gpsRecordInputStreams) {
                    is.close();
                }

                nodeInputStream.close();
                edgeInputStream.close();
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return Result.success("success");
    }
}
